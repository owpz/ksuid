name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  verify:
    name: Verify Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      prerelease: ${{ steps.check_prerelease.outputs.prerelease }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      
      - name: Check if prerelease
        id: check_prerelease
        run: |
          if [[ "${{ steps.extract_version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Verify package.json version matches tag
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          if [ "${{ steps.extract_version.outputs.version }}" != "$PKG_VERSION" ]; then
            echo "Error: Tag version doesn't match package.json version"
            exit 1
          fi
      
      - name: Run full test suite
        run: npm test
      
      - name: Build package
        run: npm run build
      
      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "Error: Build artifacts missing"
            exit 1
          fi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: verify
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog
      
      - name: Generate changelog
        id: changelog
        run: |
          # Extract changelog section for this version
          VERSION="${{ needs.verify.outputs.version }}"
          
          # Create release notes from CHANGELOG.md or generate basic ones
          if [ -f "CHANGELOG.md" ]; then
            # Extract section for this version from CHANGELOG.md
            sed -n "/^## \[${VERSION}\]/,/^## /p" CHANGELOG.md | head -n -1 > release_notes.md
          else
            # Generate basic release notes from git commits
            echo "## Changes in v${VERSION}" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md || \
            git log --pretty=format:"- %s" --max-count=10 >> release_notes.md
          fi
          
          # Add compatibility information
          echo "" >> release_notes.md
          echo "## Go Compatibility" >> release_notes.md
          echo "✅ **100% compatible** with segmentio/ksuid Go implementation" >> release_notes.md
          echo "✅ All cross-validation tests passing" >> release_notes.md
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.verify.outputs.version }}
          release_name: Release v${{ needs.verify.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ needs.verify.outputs.prerelease }}

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [verify, create-release]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
          cache: "npm"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm run build
      
      - name: Publish to npm
        run: |
          if [ "${{ needs.verify.outputs.prerelease }}" = "true" ]; then
            npm publish --access public --tag beta
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}